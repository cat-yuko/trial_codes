ktx2-web-app/
├── backend/
│   ├── Dockerfile
│   ├── package.json
│   ├── app.js
├── uploads/        # 一時ファイル保存用
├── docker-compose.yml
└── frontend/       # Optional: React等（別途対応可）


npm install @gltf-transform/core @gltf-transform/functions @gltf-transform/extensions



 ◎ glTF最適化の具体的な内容

| 処理                  | 概要                                      | 効果                  | 関連関数                            |
| ------------------- | ------------------------------------------ | --------------------- | ---------------------------------- |
| **reorder**         | 頂点の描画順をGPUに最適化                    | FPS向上・描画効率      | ✅ `optimize()` に含まれる          |
| **dedup**           | 重複したデータ削除（メッシュ・マテリアルなど） | ファイルサイズ削減     | ✅ 含まれる                         |
| **prune**           | 使われていないノードやテクスチャを削除        | ファイルクリーンアップ  | ✅ 含まれる                         |
| **flatten**         | 不要な階層構造を削除                         | 階層構造簡素化         | ✅ 含まれる（❗構造保持時は注意）    |
| **weld**            | 頂点位置が同じものを統合                     | 頂点数削減             | ❌ `optimize()` 非含               |
| **instance**        | 同じメッシュの重複を共有化                   | メモリ効率             | ❌ `optimize()` 非含               |
| **textureCompress** | テクスチャ圧縮（KTX2など）                   | GPU圧縮 + 軽量化       | ✅ 別途必要                        |
| **dracoCompress**   | 頂点データのDraco圧縮                       | ネット転送サイズ大幅削減 | ❌ `optimize()` 非含               |


flatten() を外すべき具体例
🧱 flattenとは？
Node ツリーの階層構造を「1つのメッシュ・1つのTransform」にまとめて簡素化する。

❌ flattenが問題になる例
| ケース                                         | 問題になる理由                                                           |
| ---------------------------------------------- | ----------------------------------------------------------------------- |
| アニメーションが含まれている場合                  | 各ノードごとに異なるTransformや時間変化があるため、flattenで統合すると壊れる |
| 親子関係が重要なシーン構成（階層制御）            | 構造を潰すと回転/位置の継承などが失われる                                   |
| Node名・構造を保持してプログラム側でアクセスしたい | flattenにより全て1ノード化されて参照不可になることがある                     |
| ARアプリでNodeを部位として扱っている              | ボーン的に構造を持つものは潰さない方が良い                                  |



✅ 部分的に flatten() を適用しない（対象を制限する）ことは可能だが、
optimize() の flatten は「全体に一括適用」されてしまうため、optimize() を使わず flatten だけ手動制御する必要がある

・例：flatten 以外を optimize 相当で実行し、flatten は除外または条件付き実行
import {
  reorder, dedup, prune, textureCompress, flatten
} from '@gltf-transform/functions';

await doc.transform(
  reorder(),   // 描画順序最適化
  dedup(),     // 重複削除
  prune(),     // 未使用要素の削除
  // flatten() は後で条件付き実行
);

✅ flatten() を条件付きで実行する方法
🔹 条件：アニメーションが存在しない場合のみ flatten する
if (doc.getRoot().listAnimations().length === 0) {
  await doc.transform(flatten());
}

🔹 条件：あるノード名だけ flatten 対象に含めない
残念ながら、flatten() 自体には「除外ノード指定」などのオプションは現在ありません（2025年6月時点）。
そのため、代替案として：

✔️ flatten 前に「保持したいノード」を Extras にタグ付け
const nodesToKeep = doc.getRoot().listNodes().filter(node => node.getName().startsWith('KEEP_'));
for (const node of nodesToKeep) {
  node.setExtras({ preserve: true });
}


✅ 汎用的なツールとして glTF/GLB を扱う場合は、flatten() を外しておくのが無難で安全
✅ 汎用ツールでは flatten を デフォルトで外す → オプションで有効化できるようにするのが理想

// デフォルトでは flatten をスキップ
await doc.transform(
  optimize({ flatten: false }), // または個別に reorder/dedup/prune
  textureCompress({ encoder: 'toktx', targetFormat: 'uastc' })
);

CLIやWeb UIなどで 「構造を単純化（flatten）する」オプションをチェックボックス等でONにできる設計がベストです。

✅ flattenを有効化してよい典型的なケース
| ケース                                    | flatten OK      |
| ---------------------------------------- | --------------- |
| glTFを静的に表示するだけの用途（ビューアー） | ✅ 安全         |
| GLBを軽量にして配布するだけ                 | ✅ 有効         |
| 1ノードにまとめたいなど意図的な場合          | ✅ 問題なし     |

✅ flattenが危険なケース
| ケース                       | flattenは避ける             |
| --------------------------- | --------------------------- |
| アニメーションあり            | ❌ 高リスク（壊れる）        |
| Node階層で操作・参照するアプリ | ❌ NG（参照が破壊される）     |
| glTFの再編集や再インポート予定 | ❌ flatten済みだと不便になる |


✅ 汎用ツールでの基本戦略（推奨構成）
| 処理             | デフォルト状態 | ユーザー切替可能                    |
| --------------- | ------------- | ---------------------------------- |
| reorder         | ✅ 有効       | ✕（常に有効でよい）                 |
| prune           | ✅ 有効       | ✕（常に有効でよい）                 |
| dedup           | ✅ 有効       | ✕（常に有効でよい）                 |
| flatten         | ❌ 無効       | ✅ チェックボックスなどで切替        |
| weld            | ❌ 無効       | ✅ 上級者向けオプションで            |
| instance        | ❌ 無効       | ✅ 上級者向けオプションで            |
| dracoCompress   | ❌ 無効       | ✅ 要注意（変換対象次第）            |
| textureCompress | ✅ 有効       | ✅ フォーマット選択可（etc1s/uastc） |

✅ まとめ：汎用ツール設計の方針
１．安全な最適化（reorder / dedup / prune）は常時ON
２．構造を壊す処理（flatten / weld / instance / draco）はOFF → オプションで切替
３．textureCompress だけは明示選択肢（uastc or etc1s）を提供
４．アニメーション・構造・編集を考慮するなら flatten / weld / instance を慎重に扱うべき

